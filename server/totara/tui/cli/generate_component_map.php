<?php
/*
 * This file is part of Totara Learn
 *
 * Copyright (C) 2019 onwards Totara Learning Solutions LTD
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Simon Chester <simon.chester@totaralearning.com>
 * @package totara_core
 */

define('CLI_SCRIPT', true);
define('ABORT_AFTER_CONFIG', true);

require(__DIR__.'/../../../config.php');
require_once($CFG->libdir.'/clilib.php');

error_reporting(E_ALL | E_STRICT);
ini_set('display_errors', 1);

[$options, $unrecognized] = cli_get_params(
    [
        'write' => false,
    ],
    [
        'h' => 'help'
    ]
);

if ($unrecognized) {
    $unrecognized = implode("\n  ", $unrecognized);
    cli_error(get_string('cliunknowoption', 'admin', $unrecognized), 2);
}

if (!$options['write']) {
    $help = <<<OUT
Generate a component map that can be used to identify component and plugin
code bases, and the frankenstyle name that will be used by Totara to identify
those components and plugins.

The component map is written to component_map.json

Options:
-h, --help            Print out this help
--write               Write data to file

OUT;

    echo($help);
    exit(0);
}

$strip_srcroot = function(&$path): string {
    global $CFG;
    $pos = strpos($path, $CFG->srcroot);
    if ($pos === 0) {
        $path = substr($path, strlen($CFG->srcroot) + 1);
    }
    return $path;
};

$subsystems = array_filter(\core_component::get_core_subsystems());
array_walk($subsystems, $strip_srcroot);

$plugintypes = \core_component::get_plugin_types();
array_walk($plugintypes, $strip_srcroot);


$components = [
    'core' => 'server/lib'
];
foreach (\core_component::get_component_list() as $component => $map) {
    $components = array_merge($components, $map);
}
$components = array_filter($components); // Remove those with null values.
array_walk($components, $strip_srcroot);
ksort($components);

$path = __FILE__;
$strip_srcroot($path);
$data = [
    '//' => 'Generated by ' . $path,
    'subsystems' => $subsystems,
    'plugintypes' => $plugintypes,
    'components' => $components,
];

$content = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . "\n";

file_put_contents($CFG->srcroot . '/component_map.json', $content);
