const getPixels=require("get-pixels"),quantize=require("quantize");function createPixelArray(e,t,o){const n=e,r=[];for(let e,l,i,a,u,c=0;c<t;c+=o)e=4*c,l=n[e+0],i=n[e+1],a=n[e+2],u=n[e+3],(void 0===u||u>=125)&&(l>250&&i>250&&a>250||r.push([l,i,a]));return r}function validateOptions(e){let{colorCount:t,quality:o}=e;if(void 0!==t&&Number.isInteger(t)){if(1===t)throw new Error("colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()");t=Math.max(t,2),t=Math.min(t,20)}else t=10;return(void 0===o||!Number.isInteger(o)||o<1)&&(o=10),{colorCount:t,quality:o}}function loadImg(e){return new Promise(((t,o)=>{getPixels(e,(function(e,n){e?o(e):t(n)}))}))}function getColor(e,t){return new Promise(((o,n)=>{getPalette(e,5,t).then((e=>{o(e[0])})).catch((e=>{n(e)}))}))}function getPalette(e,t=10,o=10){const n=validateOptions({colorCount:t,quality:o});return new Promise(((t,o)=>{loadImg(e).then((e=>{const o=e.shape[0]*e.shape[1],r=createPixelArray(e.data,o,n.quality),l=quantize(r,n.colorCount),i=l?l.palette():null;t(i)})).catch((e=>{o(e)}))}))}module.exports={getColor:getColor,getPalette:getPalette};
