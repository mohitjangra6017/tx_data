<?php
/*
 * This file is part of Totara Learn
 *
 * Copyright (C) 2020 onwards Totara Learning Solutions LTD
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Vernon Denny <vernon.denny@totaralearning.com>
 * @package ml_recommender
 */

namespace ml_recommender\local\import;

use ml_recommender\local\environment;

/**
 *
 * Upload recommendations per user from csv generated by the python recommender system.
 *
 * @package ml_recommender
 */
abstract class base_prediction_import {
    /**
     * Base filename, i.e. excluding file extension.
     *
     * @var string
     */
    public $filename = '';

    /**
     * Name of csv upload file.
     *
     * @var string
     */
    public $csvfilepath = '';

    /**
     * Path to lock file.
     * @var string
     */
    protected $lockfilepath;

    /**
     * File handle of csv file.
     *
     * @var string
     */
    public $csvhandle = 0;

    /**
     * base_prediction_import constructor.
     *
     * Instantiate class if it seems safe to do so.
     *
     * @param string $filename
     */
    public function __construct(string $filename) {
        $this->filename = $filename;

        // Is it safe to run job?
        $data_path = environment::get_data_path();
        $this->lockfilepath = $data_path . '/' . $this->filename . '.LOCK';
        $this->csvfilepath = $data_path . '/' . $this->filename . '.csv';

        // Ensure that no lock file already exists.
        if (file_exists($this->lockfilepath)) {
            throw new \coding_exception('Upload LOCK file present - either a run is busy, or an earlier run crashed (' . $this->csvfilepath . ')');
        } else {
            file_put_contents($this->lockfilepath, ( (string) (time())));
        }

        // Ensure that csv file is present.
        if (!file_exists($this->csvfilepath)) {
            throw new \coding_exception('Upload csv file not present:' . $this->csvfilepath);
        }
    }

    /**
     * Process the input csv file.
     *
     */
    abstract function upload(): void;

    /**
     * Convert concatenated unique id into component name and item id.
     *
     * @param string $unique_id
     * @return array
     */
    protected function get_component_id(string $unique_id): array {
        if (preg_match('/^([a-zA-Z_]+)(\d+)$/', $unique_id, $matches)) {
            $component = $matches[1];
            $item_id = $matches[2];
        }

        return [$component, $item_id];
    }

    public function __destruct() {
        // Remove lock file.
        unlink($this->lockfilepath);
    }
}
