<?php
/*
 * This file is part of Totara Learn
 *
 * Copyright (C) 2020 onwards Totara Learning Solutions LTD
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Vernon Denny <vernon.denny@totaralearning.com>
 * @package ml_recommender
 */

namespace ml_recommender\local\import;


/**
 *
 * Upload recommendations per user from csv generated by the python recommender system.
 *
 * @package ml_recommender
 */
class bulk_user_predictions extends base_prediction_import {

    /**
     * @inheritDoc
     */
    public function upload(): void {
        global $DB;

        // Open suggestions file for processing..
        $this->csvhandle = fopen($this->csvfilepath, 'r');
        if ($this->csvhandle === FALSE) {
            throw new \coding_exception('Could not open recommendations file for processing: ' . $this->csvfilepath);
        }

        // Skip headers.
        $headers = fgets($this->csvhandle);

        // Delete all existing recommendations.
        $DB->delete_records('ml_recommender_users');

        // Handling rows as strings will be faster than managing arrays via fgetcsv() for large files, because we have only a few fields.
        while (($row = fgets($this->csvhandle)) !== FALSE) {

            // Fields: user_id, item_id, ranking.
            $fields = explode(',', $row);

            // A score of -1 means recommender couldn't find any interactions for this user, therefore no recommendations.
            $score = round((float) $fields[2], 12);
            if ($score === -1.0) {
                continue;
            }

            // Separate the concatenated component type and id.
            $unique_id = $fields[1];
            list($component, $item_id) = $this->get_component_id($unique_id);

            // Build record object.
            $record = new \stdClass();
            $record->user_id = (int) $fields[0];
            $record->unique_id = $unique_id;
            $record->item_id = (int) $item_id;
            $record->component = $component;
            $record->area = null;
            $record->score = (float) $score;
            $record->time_created = time();

            // Write to database.
            $DB->insert_record('ml_recommender_users', $record);
        }

        // Wrap up.
        fclose($this->csvhandle);
    }
}
