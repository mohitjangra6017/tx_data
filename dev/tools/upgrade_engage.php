<?php
/**
 * This file is part of Totara Learn
 *
 * Copyright (C) 2020 onwards Totara Learning Solutions LTD
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Kian Nguyen <kian.nguyen@totaralearning.com>
 */

define('CLI_SCRIPT', true);

// Please note that this script is for internal development usage only - and it MUST BE REMOVED before major release.
require_once(__DIR__ . "/../../server/config.php");
global $DB, $CFG;

if (!isset($CFG->sitetype) || 'development' !== $CFG->sitetype) {
    echo "This script is for internal development only\n";
    return 1;
}

require_once("{$CFG->dirroot}/lib/clilib.php");
[$options, $unrecognized] = cli_get_params(
    ['help' => false],
    ['h' => 'help']
);

if ($options['help']) {
    echo "
This script is for internal development only, which it helps to upgrade the database changes
introduced by plugins that are not yet released to the wild yet.

Options:
    -h, --help      Print out this help
    
Examples:
php dev/tools/upgrade_engage.php    
";
    return 0;
}

// Start the actual upgrade path. How to write the upgrade script:
// + DO NOT ENTIRELY COPY from upgrade step generated by xmldb tool - because this does not check for
//   version, what it does is to only check for table and field.
//
// + Database manager can check for table/field exist with just a string - do that first before writing
//   any xmldb_table instance or xmldb_field. This happened because it will affect global scope.
//
// + Return 1 - if your upgrade step has an error.

$db_manager = $DB->get_manager();
if (!$db_manager->field_exists("engage_resource", "contextid")) {
    $table = new xmldb_table('engage_resource');
    $field = new xmldb_field('contextid', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'timemodified');
    $db_manager->add_field($table, $field);

    $records = $DB->get_records('engage_resource');
    foreach ($records as $record) {
        $context = context_user::instance($record->userid);

        $obj = new \stdClass();
        $obj->id = $record->id;
        $obj->contextid = $context->id;

        $DB->update_record('engage_resource', $obj);
    }

    $field = new xmldb_field('contextid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, 'timemodified');
    $db_manager->change_field_notnull($table, $field);

}

if ($db_manager->table_exists('engage_resource_completion')) {
    $table = new xmldb_table('engage_resource_completion');
    $key = new xmldb_key('resource_fk', XMLDB_KEY_FOREIGN, array('resourceid'), 'engage_resource', array('id'), 'cascade');
    if ($db_manager->key_exists($table, $key)) {
        $db_manager->drop_key($table, $key);
    }
}

// Add the workspace roles if they don't exist
require_once $CFG->dirroot . '/container/type/workspace/db/upgradelib.php';
if (function_exists('container_workspace_add_missing_roles')) {
    // Will do the check internally
    container_workspace_add_missing_roles();
}

$discussion_table = new xmldb_table('workspace_discussion');
$time_deleted = new xmldb_field('time_deleted', XMLDB_TYPE_INTEGER, '10');
if (!$db_manager->field_exists($discussion_table, $time_deleted)) {
    $db_manager->add_field($discussion_table, $time_deleted);
}
$reason_deleted = new xmldb_field('reason_deleted', XMLDB_TYPE_INTEGER, '1');
if (!$db_manager->field_exists($discussion_table, $reason_deleted)) {
    $db_manager->add_field($discussion_table, $reason_deleted);
}

if (!$db_manager->table_exists('workspace_off_notification')) {
    // Define table workspace_off_notification to be created.
    $table = new xmldb_table('workspace_off_notification');

    // Adding fields to table workspace_off_notification.
    $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
    $table->add_field('course_id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
    $table->add_field('user_id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
    $table->add_field('time_created', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);

    // Adding keys to table workspace_off_notification.
    $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);
    $table->add_key('course_fk', XMLDB_KEY_FOREIGN, ['course_id'], 'course', ['id']);
    $table->add_key('user_fk', XMLDB_KEY_FOREIGN, ['user_id'], 'user', ['id']);

    // Adding indexes to table workspace_off_notification.
    $table->add_index('time_created_idx', XMLDB_INDEX_NOTUNIQUE, ['time_created']);
    $table->add_index('user_course_idx', XMLDB_INDEX_UNIQUE, ['user_id', 'course_id']);

    $db_manager->create_table($table);
}

return 0;