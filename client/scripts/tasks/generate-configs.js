const path = require('path');
const fs = require('fs');
const globSync = require('tiny-glob/sync');
const prettier = require('prettier');
const { rootDir } = require('../lib/common');
const { dirMaps } = require('../lib/resolution');
const prettierConfig = require(path.join(rootDir, '.prettierrc'));

/**
 * Stringify the provided JSON, pass it through Prettier, and write it to the provided file path.
 *
 * @param {string} path
 * @param {*} json
 */
function writeJson(path, json) {
  let content = JSON.stringify(json, null, 2);
  content = prettier.format(content, { ...prettierConfig, parser: 'json' });
  fs.writeFileSync(path, content, 'utf8');
}

/**
 * Pass the provided JS through Prettier and write it to the provided file path.
 *
 * @param {string} path
 * @param {*} js
 */
function writeJs(path, js) {
  js = prettier.format(js, { ...prettierConfig, parser: 'babel' });
  fs.writeFileSync(path, js, 'utf8');
}

/**
 * Generate project configs for editor support
 */
function generateProjectConfigs() {
  const tuiConfigFiles = globSync('server/**/tui/tui.json', { cwd: rootDir }).concat(
    globSync('client/src/*/tui.json', { cwd: rootDir })
  );

  const baseFolders = tuiConfigFiles.reduce((acc, configFile) => {
    const config = JSON.parse(
      fs.readFileSync(path.resolve(rootDir, configFile))
    );
    if (!config || !config.component) {
      return acc;
    }
    acc[config.component] = path.dirname(configFile);
    return acc;
  }, {});

  generateJsconfig(baseFolders);
  generateWebpackAliases(baseFolders);
}

/**
 * Generate jsconfig.json (VS Code)
 *
 * @param {object} baseFolders
 */
function generateJsconfig(baseFolders) {
  const paths = Object.entries(baseFolders).reduce(
    (acc, [idBase, pathBase]) => {
      dirMaps.forEach(dirMap => {
        acc[idBase + dirMap.idBaseSuffix + '/*'] = [
          './' + path.join(pathBase, dirMap.path) + '/*',
        ];
      });
      return acc;
    },
    {}
  );

  const jsconfig = {
    '//': 'generated by `npm run generate-configs`',
    compilerOptions: {
      baseUrl: '.',
      paths,
    },
    include: ['**/tui/**/*'],
    exclude: ['node_modules', 'vendor', 'build'],
  };

  writeJson(path.join(rootDir, 'jsconfig.json'), jsconfig);
}

/**
 * Generate webpack aliases (JetBrains, Atom)
 *
 * In theory this should be picked up by JetBrains IDEs (WebStorm/PhpStorm) and
 * Atom, but it doesn't work perfectly. WebStorm/PhpStorm can't actually follow
 * the aliases, only recognize them as valid, and Atom with
 * `autocomplete-modules` doesn't seem to pick them up at all.
 *
 * @param {object} baseFolders
 */
function generateWebpackAliases(baseFolders) {
  const paths = Object.entries(baseFolders).reduce(
    (acc, [idBase, pathBase]) => {
      dirMaps.forEach(dirMap => {
        acc[idBase + dirMap.idBaseSuffix] =
          './' + path.join(pathBase, dirMap.path);
      });
      return acc;
    },
    {}
  );

  const js = `// generated by \`npm run generate-configs\`
/* eslint-disable */
const path = require('path');
const { rootDir } = require('../lib/common');
const paths = ${JSON.stringify(paths)};
module.exports = Object.entries(paths).reduce((acc, [key, val]) => {
  acc[key] = path.join(rootDir, val);
  return acc;
}, {});
`;

  writeJs(path.join(rootDir, 'webpack_aliases.js'), js);
}

generateProjectConfigs();
