"""
Represents the state an activity is in
"""
type mod_perform_activity_state {
  code: Int!
  name: mod_perform_activity_state_enums!
  display_name: String!
}

"""
This is generic performance activity
"""
type mod_perform_activity {
  id: core_id
  name(format: core_format = PLAIN): String!
  type: mod_perform_activity_type!
  description(format: core_format = PLAIN): String
  updated_at(format: core_date_format = TIMESTAMP): core_date
  can_view_participation_reporting: Boolean! # Whether the current user can view the participation tracking for the activity
  can_potentially_activate: Boolean! # Whether this activity could be activated due to capability checks and current status, without checking further conditions
  can_activate: Boolean! # Whether this activity can be activated, only if it satisfies all conditions
  sections: [mod_perform_section!]!
  state_details: mod_perform_activity_state!
}

"""
An element plugin which can be used to create an element
"""
type mod_perform_element_plugin {
  plugin_name: String!
  name: String!
  admin_form_component: String!
  admin_display_component: String!
  participant_form_component: String!
  participant_response_component: String!
}

"""
An element in the element library
"""
type mod_perform_element {
  id: core_id!
  element_plugin: mod_perform_element_plugin!
  title: String!
  identifier: String
  data: String
}

"""
A relationship joined to a section
"""
type mod_perform_section_relationship {
  id: core_id!
  can_answer: Boolean!
  can_view: Boolean!
  relationship: totara_core_relationship!
}

"""
A section
"""
type mod_perform_section {
  id: core_id!
  title: String!
  activity: mod_perform_activity!
  section_elements: [mod_perform_section_element!]!
  section_relationships: [mod_perform_section_relationship!]!
}

"""
An element used in a section
"""
type mod_perform_section_element {
  id: core_id!
  section: mod_perform_section!
  element: mod_perform_element!
  sort_order: Int!
}

"""
A validation error
"""
type mod_perform_validation_error {
  error_code: String!
  error_message: String!
}

"""
Details about perform activity that a user is involved with (either the subject or an answering participant)
"""
type mod_perform_subject_instance {
  id: core_id!
  activity: mod_perform_activity!
  progress_status: mod_perform_subject_instance_status!
  subject_user: core_user!
  participant_instances: [mod_perform_participant_instance!]!
}

"""
Details about a participant_instance
"""
type mod_perform_participant_instance {
  id: core_id!
  participant_id: core_id!
  participant_sections: [mod_perform_participant_section!]!
  participant: core_user!
  progress_status: mod_perform_participant_instance_status!
  relationship_name: String!
}

"""
A list of possible states that a performance activity can be in
"""
enum mod_perform_activity_state_enums {
  DRAFT
  ACTIVE
}

"""
A list of possible states that a subject instance can be in
"""
enum mod_perform_subject_instance_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
}

"""
A list of possible states that a participant instance can be in
"""
enum mod_perform_participant_instance_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
}

input update_section_relationships_input {
  section_id: core_id!
  relationship_ids: [Int]!
}

"""
Input type for deleting an activity
"""
input mod_perform_delete_activity_input {
  activity_id: core_id!
}

extend type Query {
  """
  A list of all performance activities that the current user can administer
  """
  mod_perform_activities: [mod_perform_activity!]!

  """
  This query returns a single performance activity
  """
  mod_perform_activity(activity_id: core_id!): mod_perform_activity

  """
  The number of users that will be assigned to an activity upon activation
  """
  mod_perform_activity_users_to_assign_count(activity_id: core_id!): Int

  """
  A list of all element types that can be used to create elements
  """
  mod_perform_element_plugins: [mod_perform_element_plugin!]!

  """
  A section of elements for an admin to configure
  """
  mod_perform_section_admin(section_id: core_id!): mod_perform_section

  """
  A list of all performance activities a user is participating in
  """
  mod_perform_subject_instances(
    participant_id: core_id
    filters: mod_perform_subject_instance_filters
  ): [mod_perform_subject_instance!]!

  """
  A specific performance activity (perform_subject_instance) a user is participating in
  """
  mod_perform_subject_instance(
    subject_instance_id: core_id!
  ): mod_perform_subject_instance

  """
  A section of elements for a user to respond to
  """
  mod_perform_participant_section(
    participant_instance_id: core_id!
  ): mod_perform_participant_section
}

"""
Create a new element and add it to a section
"""
input mod_perform_create_new_element_input {
  plugin_name: param_text!
  title: param_text!
  data: param_text
  sort_order: param_integer!
}

"""
Link to an existing element
"""
input mod_perform_create_link_element_input {
  element_id: core_id!
  sort_order: param_integer!
}

"""
Update an existing element
"""
input mod_perform_update_element_input {
  element_id: core_id!
  title: param_text!
  data: param_text!
}

"""
Delete an existing section element
"""
input mod_perform_delete_section_element_input {
  section_element_id: core_id!
}

"""
Move an existing section element
"""
input mod_perform_move_section_element_input {
  section_element_id: core_id!
  sort_order: param_integer!
}

"""
Update a section
"""
input mod_perform_update_section_elements_input {
  section_id: core_id!
  create_new: [mod_perform_create_new_element_input!]
  create_link: [mod_perform_create_link_element_input!]
  update: [mod_perform_update_element_input!]
  delete: [mod_perform_delete_section_element_input!]
  move: [mod_perform_move_section_element_input!]
}

"""
Input type for activating an activity
"""
input mod_perform_activate_activity_input {
  activity_id: core_id!
}

"""
Mutation return type including an activity
"""
type mod_perform_activate_activity_result {
  activity: mod_perform_activity!
}

"""
Mutation return type including an activity
"""
type mod_perform_activity_result {
  activity: mod_perform_activity!
}

"""
Mutation return type including a section
"""
type mod_perform_section_result {
  section: mod_perform_section!
}

"""
Mutation return type including a participant section
"""
type mod_perform_participant_section_result {
  participant_section: mod_perform_section!
}

extend type Mutation {
  mod_perform_create_activity(
    name: param_text!
    description: param_text
    status: mod_perform_activity_state_enums
    type: core_id!
  ): mod_perform_activity_result!

  mod_perform_update_activity_general_info(
    activity_id: core_id!
    name: param_text!
    description: param_text
  ): mod_perform_activity_result!

  mod_perform_update_section_relationships(
    input: update_section_relationships_input!
  ): mod_perform_section_result!

  """
  Update the elements in a section
  """
  mod_perform_update_section_elements(
    input: mod_perform_update_section_elements_input!
  ): mod_perform_section_result!

  """
  Activate an activity
  """
  mod_perform_activate_activity(
    input: mod_perform_activate_activity_input!
  ): mod_perform_activate_activity_result!

  """
  Delete an activity
  """
  mod_perform_delete_activity(
    input: mod_perform_delete_activity_input!
  ): Boolean!
}

"""
Competency profile assignment filters
"""
input mod_perform_subject_instance_filters {
  about: [mod_perform_subject_instance_about_filter]
}

enum mod_perform_subject_instance_about_filter {
  SELF
  OTHERS
}
