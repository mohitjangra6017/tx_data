"""
A relationship joined to a section
"""
type mod_perform_section_relationship {
  id: core_id!
  can_answer: Boolean!
  can_view: Boolean!
  relationship: totara_core_relationship!
}

"""
A section
"""
type mod_perform_section {
  id: core_id!
  title: String!
  display_title(format: core_format = PLAIN): String!
  activity: mod_perform_activity!
  sort_order: Int!
  section_elements: [mod_perform_section_element!]!
  section_relationships: [mod_perform_section_relationship!]!
  section_elements_summary: mod_perform_section_elements_summary
  created_at(format: core_date_format = DATETIME): core_date!
  updated_at(format: core_date_format = DATETIME): core_date!
}

"""
An element statistics in a section
"""
type mod_perform_section_elements_summary {
  required_question_count: Int!
  optional_question_count: Int!
  other_element_count: Int!
}

"""
An element used in a section
"""
type mod_perform_section_element {
  id: core_id!
  section: mod_perform_section!
  element: mod_perform_element!
  sort_order: Int!
}

"""
Update settings input type
"""
input update_section_settings_input {
  section_id: core_id!
  title: String
  relationships: [update_section_relationship_input!]!
}

"""
Section relationship object
used to update section relationships.
"""
input update_section_relationship_input {
  id: core_id!
  can_view: Boolean = false
}

extend type Query {
  """
  A section of elements for an admin to configure
  """
  mod_perform_section_admin(section_id: core_id!): mod_perform_section
  """
  A section of elements for a user to respond to
  """
  mod_perform_participant_section(
    participant_instance_id: core_id!
  ): mod_perform_participant_section
}

"""
Delete an existing section element
"""
input mod_perform_delete_section_element_input {
  section_element_id: core_id!
}

"""
Move an existing section element
"""
input mod_perform_move_section_element_input {
  section_element_id: core_id!
  sort_order: param_integer!
}

"""
Update a section
"""
input mod_perform_update_section_elements_input {
  section_id: core_id!
  create_new: [mod_perform_create_new_element_input!]
  create_link: [mod_perform_create_link_element_input!]
  update: [mod_perform_update_element_input!]
  delete: [mod_perform_delete_section_element_input!]
  move: [mod_perform_move_section_element_input!]
}

"""
Mutation return type including a section
"""
type mod_perform_section_result {
  section: mod_perform_section!
}

"""
Mutation return type including a participant section
"""
type mod_perform_participant_section_result {
  participant_section: mod_perform_section!
}

"""
Input type for adding a new section to an activity
"""
input mod_perform_add_section_input {
  activity_id: core_id!
  """
  Sort order to add this section before
  """
  add_before: Int
}

"""
Mutation return type including the section just added
"""
type mod_perform_add_section_result {
  section: mod_perform_section!
}

extend type Mutation {
  """
  Updates settings (including relationships) of given section
  """
  mod_perform_update_section_settings(
    input: update_section_settings_input!
  ): mod_perform_section_result!

  """
  Update the elements in a section
  """
  mod_perform_update_section_elements(
    input: mod_perform_update_section_elements_input!
  ): mod_perform_section_result!

  """
  Update an activity setting: multisection.
  """
  mod_perform_toggle_activity_multisection_setting(
    input: toggle_activity_setting!
  ): mod_perform_activity!

  """
  Adds a new section at the end
  """
  mod_perform_add_section(
    input: mod_perform_add_section_input!
  ): mod_perform_add_section_result!
}
